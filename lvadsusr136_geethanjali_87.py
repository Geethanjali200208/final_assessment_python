# -*- coding: utf-8 -*-
"""LVADSUSR136-geethanjali-87.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qJYEBGdTAyHrBhxn59OpawEDbNtPNIjd
"""

#1 importing dataset
import pandas as pd
data=pd.read_csv('/content/Walmart_Dataset Python_Final_Assessment.csv')
df=pd.DataFrame(data)
#print(df)
print(df.info())
print(df.shape)
print(df.describe())
print(df.describe(include='object'))
print(df.quantile([0.25, 0.5, 0.75]))

#2 check and handle missing values
import pandas as pd
missingvalues = df.isnull().sum()
print("Missing values:", missingvalues)
fill = df.fillna(df.mean())
drop_rows = df.dropna()
drop_columns= df.dropna(axis=1)
print("orginal shape of the dataframe:", df.shape)
print("shape - after filling missing values:", fill.shape)
print("shape- after dropping rows with missing values:", drop_rows.shape)
print("shape- after dropping columns with missing values:", drop_columns.shape)
#identify and resolve duplicate data entries
import pandas as pd
duplicate_rows = df[df.duplicated()]
num_duplicate_rows = duplicate_rows.shape[0]
print("Number of duplicate rows:", num_duplicate_rows)
unique_first = df.drop_duplicates()
unique_last = df.drop_duplicates(keep='last')
unique_none = df.drop_duplicates(keep=False)
print("DataFrame shape:", df.shape)
print("after removing duplicates-keeps 1st:", unique_first.shape)
print("after removing duplicates-keeps last:",unique_last.shape)
print("after removing all duplicate rows:", unique_none.shape)

#3 Descriptive statistics
import pandas as pd
basic_statistics = df.describe()
#print("Basic Statistics:\n", basic_statistics)
#printing mean,mode for all numerical datas
mean=df.mean()
mode=df.mode()
median=df.median()
#print(mean," ",mode," ",median)
sales_mean = df['Sales'].mean()  #specific mean
sales_mode = df['Sales'].mode().iloc[0]
quantity_mean = df['Quantity'].mean()
quantity_mode = df['Quantity'].mode().iloc[0]
median = df['Sales'].min()
profit_minimum = df['Profit'].min()
profit_maximum = df['Profit'].max()
range_values = profit_maximum - profit_minimum
std_deviation = df.std()
variance = df.var()
print(quantity_mean,sales_mean)
print( quantity_mode,sales_mode)
print( median)
print( profit_minimum)
print( profit_maximum)
print( range_values)
print(std_deviation)
print(variance)

#4 Data Visualization
import matplotlib.pyplot as plt
counts = df['Category'].value_counts()
plt.figure(figsize=(10, 6))
counts.plot(kind='bar')
plt.title('Distribution of Categories')
plt.xlabel('Category')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()
# piechart
plt.figure(figsize=(8, 8))
plt.pie(counts, labels=counts.index, startangle=140)
plt.title('Proportion of Categories')
plt.axis('equal')
plt.show()
#histogram
plt.figure(figsize=(10, 6))
plt.hist(df['Sales'], bins=15, color='skyblue', edgecolor='black', alpha=0.7)
plt.title('Histogram of Sales')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()
#scatter chart
plt.figure(figsize=(10, 6))
plt.scatter(df['Sales'], df['Profit'], color='orange', alpha=0.7)
plt.title('Scatter Chart of Sales vs. Profit')
plt.xlabel('Sales')
plt.ylabel('Profit')
plt.grid(True)
plt.show()

#5 identifying relationships-correlation between variables
import seaborn as sns
numerical_columns = ['Profit', 'Sales', 'Quantity']
matrix = df[numerical_columns].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(matrix, annot=True, fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

#6 Anomaly detection
# Box plot for Sales
plt.figure(figsize=(8, 6))
sns.boxplot(x=df['Sales'], color='hotpink')
plt.title('Box Plot-Sales')
plt.xlabel('Sales')
plt.legend()
plt.show()

# Box plot for Profit
plt.figure(figsize=(8, 6))
sns.boxplot(x=df['Profit'], color='b')
plt.title('Box Plot - Profit')
plt.xlabel('Profit')
plt.show()

#7 Data discovery
#1)Trend analysis
# Convert 'YearMonth' to string format
data['YearMonth'] =data['YearMonth'].astype(str)

# Plotting sales trend over the year
plt.figure(figsize=(10, 6))
plt.plot(data['YearMonth'],data['Sales'], marker='o', color='skyblue', label='Sales')
plt.title('Monthly Sales Trend')
plt.xlabel('Year-Month')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.show()

# Plotting profit trend over the year
plt.figure(figsize=(10, 6))
plt.plot(data['YearMonth'],data['Profit'], marker='o', color='orange', label='Profit')
plt.title('Monthly Profit Trend')
plt.xlabel('Year-Month')
plt.ylabel('Total Profit')
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.show()
#2)product category shown most growth
df['Year'] = df['Order Date'].dt.year
category_yearly_sales = df.groupby(['Category', 'Year'])['Sales'].sum().unstack()
category_yearly_sales['Growth Rate'] = category_yearly_sales.pct_change(axis=1).iloc[:, -1] * 100
max_growth_category = category_yearly_sales['Growth Rate'].idxmax()
print( max_growth_category)

#2)customer analysis
#1)top 5 customers
group = df.groupby('EmailID')
count =group.size()
sales = group['Sales'].sum()
customer_summary = pd.DataFrame({'Orders':count, 'Total Sales': sales})
customers = customer_summary.sort_values(by=['Orders', 'Total Sales'], ascending=False)
top_5_customers = customers.head(5)
print("Top 5 Customers based on Number of Orders and total sales:")
print(top_5_customers[['Orders', 'Total Sales']])
#2)repeat purchase behaviour
import pandas as pd
df['OrderDate'] = pd.to_datetime(df['Order Date'])
df.sort_values(by=['EmailID', 'Order Date'], inplace=True)
df['TimeBetweenOrders'] = df.groupby('EmailID')['Order Date'].diff()
average_time_between_orders = df.groupby('EmailID')['TimeBetweenOrders'].mean()

print("Average Time Between Orders for Each Customer:")
print(average_time_between_orders)
print(average_time_between_orders.mean())

#3)comprehensive analytics
#1)

import plotly.express as px
fig = px.scatter_geo(df, locations="Geography", locationmode="USA-states",
                      hover_name="Product Name", size="Sales", color="Sales",
                      scope="usa", title="Geographical Distribution")
fig.show()
#Places cannot be plotted because of lack of lat long.

#2)

customer_order_amounts = df.groupby('EmailID')['Sales'].sum().reset_index()

top_10_percent = int(len(customer_order_amounts) * 0.1)
high_value_customers = customer_order_amounts.nlargest(top_10_percent, 'Sales')
print("High value Customers based on purchase Value:")
print(high_value_customers)

customer_order_amounts = df.groupby('EmailID')['Quantity'].sum().reset_index()

top_10_percent = int(len(customer_order_amounts) * 0.1)
high_value_customers = customer_order_amounts.nlargest(top_10_percent, 'Quantity')
print("High value Customers based on purchase Quantity:")
print(high_value_customers)

df.sort_values(by=['EmailID', 'Order Date'], inplace=True)
df['TimeBetweenOrders'] = df.groupby('EmailID')['Order Date'].diff()
average_time_between_orders = df.groupby('EmailID')['TimeBetweenOrders'].mean()
print("High value Customers based on purchase Frequency:")
print(average_time_between_orders.nsmallest(top_10_percent))

for index, customer in high_value_customers.iterrows():
  pass
  #We can write a function to send promotional offers to these value customers

"""#3) High value customers can be identified by their purchasing quantity, purchase frequency and pruchase amount .
 These customers can be given additional promotions and offers to enhance customer loyalty and they are more likely to recommend wallmart to other potential customers"""

"""Insights:
7.Trend analysis:
By analysing sales and profit trend
there is a seasonal change like during the year 2024 both values achieved their maximum sales and profit.
and the patterns also seems to be similar.
customer analysis:
by analysing top 5 customer we can able to infer that wiiliambrown placed the highest orders which is 24.followed by arthur,rickwilson,gregguthrie and zuschuss.
comprehensive analysis:
1)demand forecasting
2)supplychain management
3)warehouse efficiency
4)inventory optimization
by applying these techniques we can able to optimize supplychain.
High value customers can be identified by their purchasing quantity, purchase frequency and pruchase amount .These customers can be given additional promotions and offers to enhance customer loyalty and they are more likely to recommend wallmart to other potential customers

"""